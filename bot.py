import logging
from aiogram import Bot, Dispatcher, executor, types
from banshiki import SQbanshik
import random

API_TOKEN = '5119965890:AAGlVxqvhTB9gNCxU8YMixjlSUqByrzI0zc'
# log level
logging.basicConfig(level=logging.INFO)
# bot init
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

db = SQbanshik('database.db')


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç üòâ {message.from_user.full_name} !\n–¢–≤–æ–π ID : "
                         f"{message.from_user.id}")

    if not db.banshik_exists(message.from_user.id):
        db.add_human(message.from_user.id, message.from_user.full_name)
        await message.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö !")
    else:
        await message.answer("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç !")

    await message.answer("–ü–æ–º–æ—â—å /help")


@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    await message.answer(
        "/update_all_bath_house\n–û–±–Ω–æ–≤–∏—Ç—å —É –≤—Å–µ—Ö –Ω–∞ '?', —É—Ç—Ä–æ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –ò–õ–¨–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û !\n\n"
        "/update_all_amount\n–û–±–Ω–æ–≤–∏—Ç—å —É –≤—Å–µ—Ö –Ω–∞ '0', —É—Ç—Ä–æ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –ò–õ–¨–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û !\n\n"
    )


@dp.message_handler(commands=['help'])
async def help_me(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('–ë–∞–Ω—è üçª')
    item2 = types.KeyboardButton('–ö—Ç–æ –∏–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–Ω—é ? üèÉ')
    item3 = types.KeyboardButton('–°–¥–∞–ª –≤ –∫—É–±—ã—à–∫—É ‚ùì')
    item4 = types.KeyboardButton('–ö—Ç–æ, —Å–∫–æ–ª—å–∫–æ —Å–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è –≤ –∫—É–±—ã—à–∫—É ?')
    item5 = types.KeyboardButton('–í–µ–Ω–∏–∫–∏ ü•¨')
    item6 = types.KeyboardButton('–í—Å–µ–≥–æ –≤ –∫—É–±—ã—à–∫–µ üí∞')
    item7 = types.KeyboardButton('–ü–∏–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è üç∫ —Ä–∞–Ω–¥–æ–º üé∞ –æ—Ç 0 –¥–æ 15')  # üé≤ üíµ
    markup.add(item1, item2, item3, item4, item5, item6, item7)
    await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π", reply_markup=markup)


@dp.message_handler(content_types=['text'])
async def lalala(message):
    if message.text == '–ü–∏–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è üç∫ —Ä–∞–Ω–¥–æ–º üé∞ –æ—Ç 0 –¥–æ 15':
        await bot.send_message(message.chat.id, "–í—ã–∏–≥—Ä–∞–ª –Ω–æ–º–µ—Ä : {0}".format(random.randint(0, 15)))
    elif message.text == '–ë–∞–Ω—è üçª':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton('–¥–∞', callback_data='yes')
        item2 = types.InlineKeyboardButton('–Ω–µ—Ç', callback_data='no')
        markup.add(item1, item2)
        await bot.send_message(message.chat.id, "–ü–æ–π–¥—ë—à—å —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–Ω—é ?", reply_markup=markup)
    elif message.text == '–°–¥–∞–ª –≤ –∫—É–±—ã—à–∫—É ‚ùì':
        markup = types.InlineKeyboardMarkup(row_width=4)
        item1 = types.InlineKeyboardButton('0', callback_data='0')
        item2 = types.InlineKeyboardButton('50', callback_data='50')
        item3 = types.InlineKeyboardButton('100', callback_data='100')
        item4 = types.InlineKeyboardButton('150', callback_data='150')
        markup.add(item1, item2, item3, item4)
        await bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–∞–ª –≤ –∫—É–±—ã—à–∫—É ?", reply_markup=markup)
    elif message.text == '–ö—Ç–æ –∏–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–Ω—é ? üèÉ':
        await message.answer(f"–í–æ—Ç –∫—Ç–æ –∏–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–Ω—é :\n\n {db.get_bath()}")
    elif message.text == '–ö—Ç–æ, —Å–∫–æ–ª—å–∫–æ —Å–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è –≤ –∫—É–±—ã—à–∫—É ?':
        await message.answer(f"–°–µ–≥–æ–¥–Ω—è —Å–¥–∞–ª–∏ :\n\n {db.get_amount()}")
    elif message.text == '/update_all_bath_house':
        await message.answer("–û–±–Ω–æ–≤–∏–ª ü§ù")
        db.update_everyone_bath_house('?')
    elif message.text == '/update_all_amount':
        await message.answer("–û–±–Ω–æ–≤–∏–ª ü§ù")
        db.update_everyone_amount(0)

    elif message.text == '–í–µ–Ω–∏–∫–∏ ü•¨':
        markup = types.InlineKeyboardMarkup(row_width=3)
        item1 = types.InlineKeyboardButton('50', callback_data='fifty')
        item2 = types.InlineKeyboardButton('100', callback_data='one_hundred')
        item3 = types.InlineKeyboardButton('300', callback_data='300')
        markup.add(item1, item2, item3)
        await bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –≤–∑—è–ª–∏ –Ω–∞ –≤–µ–Ω–∏–∫–∏ ?", reply_markup=markup)

    elif message.text == '–í—Å–µ–≥–æ –≤ –∫—É–±—ã—à–∫–µ üí∞':
        await message.answer(f"–í—Å–µ–≥–æ –≤ –∫—É–±—ã—à–∫–µ :\n {db.get_kubyshka()} –º–æ–Ω–µ—Ç–æ–∫")


@dp.callback_query_handler(lambda callback_query: True)
async def some_callback_handler(callback_query: types.CallbackQuery):
    if callback_query.message:
        if callback_query.data == 'yes':
            db.update_bath('–¥–∞', callback_query.from_user.id)
        elif callback_query.data == 'no':
            db.update_bath('–Ω–µ—Ç', callback_query.from_user.id)
            # await bot.send_message(callback_query.message.chat.id, "–ó–∞–ø–∏—Å–∞–ª üòâ")
        elif callback_query.data == '0':
            db.update_amount(0, callback_query.from_user.id)
            db.add_kubyshka(0)
        elif callback_query.data == '50':
            db.update_amount(50, callback_query.from_user.id)
            db.add_kubyshka(50)
        elif callback_query.data == '100':
            db.update_amount(100, callback_query.from_user.id)
            db.add_kubyshka(100)
        elif callback_query.data == '150':
            db.update_amount(150, callback_query.from_user.id)
            db.add_kubyshka(150)
        elif callback_query.data == 'fifty':
            db.delete_kubyshka(50)
        elif callback_query.data == 'one_hundred':
            db.delete_kubyshka(100)
        elif callback_query.data == '300':
            db.delete_kubyshka(300)
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id, text="–ó–∞–ø–∏—Å–∞–ª üòâ")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
